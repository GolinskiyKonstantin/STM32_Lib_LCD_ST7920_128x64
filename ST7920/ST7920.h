/*

  ******************************************************************************
  * @file 			( фаил ):   ST7920.h
  * @brief 		( описание ):  	
  ******************************************************************************
  * @attention 	( внимание ):
  ******************************************************************************
  
*/

#ifndef _ST7920_H
#define _ST7920_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ----------------------------------------------------------*/

#include "main.h"

#include "fonts.h"

#include "stdlib.h"
#include "string.h"
#include "stdbool.h"
#include "math.h"

/*
	подключение LCD_128_64_ST7920:

	в CubeMX включаем SPI только на отправку скорость около 1.125Мбит/с ( если больше то будут иероглифы )
	также ставим CPOL HIGH   and  CPHA 2Edge

	( пины желательно называем как в коде если нет то в коде ставим нужные )

	GND	 ->   GND
	VCC  ->   +5V (3.3V) (зависит от экрана)
	RS   ->   CS ( chip select )
	R/W	 ->   MOSI
	E	 ->   SCK
	PS8  ->   GND ( для работы в режиме SPI )
	RST  ->   RST ( Reset )
	BLA	 ->   anode led ( +3.3V or PWM )
	BLK	 ->   katode led ( GND )

*/

//##########  SETUP  ######################################################################################################################################
			
		// указываем порт SPI для HAL -------------------
		#define 	ST7920_SPI_HAL 		hspi1
		//-----------------------------------------------
		
		//=== указываем порты ( если в кубе назвали их RES CS то тогда нечего указывать не нужно )
		
		#if defined (RST_GPIO_Port)
		#else
			#define RST_GPIO_Port   	GPIOA
			#define RST_Pin				GPIO_PIN_12
		#endif
		

		#if defined (CS_GPIO_Port)
		#else
			#define CS_GPIO_Port    GPIOA
			#define CS_Pin			GPIO_PIN_14
		#endif

		
		//=============================================================================
		
//##########################################################################################################################

enum PixelStatus{ PIX_OFF, PIX_ON };


#ifdef ST7920_SPI_HAL
	extern SPI_HandleTypeDef ST7920_SPI_HAL;
#endif

#define PI 	3.14159265

/** Screen width in pixels (tested with 128) */
#define SCREEN_WIDTH 	128
/** Screen height in pixels (tested with 64) */
#define SCREEN_HEIGHT 	64


/* Absolute value */
#define ABS(x)   ((x) > 0 ? (x) : -(x))
	

/* Functions prototypes ----------------------------------------------*/


	/*
		******************************************************************************
		* @brief	 ( описание ):  инициализация дисплея ( при другой инициализации можно поменять параметры внутри функции )
		* @param	( параметры ):
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_Init( void );
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ): Функция включения/выключения графического режима
		* @param	( параметры ): 1-enable, 0-disable
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_GraphicMode(bool enable);
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ): Display ON OFF ( очищаем экран но не очищаем буфер кадра )
		* @param	( параметры ): 1-enable, 0-disable
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_DisplayOnOff(bool enable);
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ): Функция очистки дисплея в графическом режиме
		* @param	( параметры ):
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_Clear( void );
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ):  функция рисует монохромныую картинку
		* @param	( параметры ):	начальные координаты X Y, сама картинка, ширина и высота картинки и цвет
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint8_t color);
	//----------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ): Функция рисования пикселя на экране
		* @param	( параметры ): координаты X(от 0 до 127) и Y(от 0 до 63)
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_DrawPixel(uint8_t x, uint8_t y);
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ):  Функция удаления пикселя на экране
		* @param	( параметры ):  координаты X(от 0 до 127) и Y(от 0 до 63)
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_ClearPixel(uint8_t x, uint8_t y);
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ):  Функция ротации  дисплея ( только в графическом дисплее ).
		* @param	( параметры ):  координаты X(от 0 до 127) и Y(от 0 до 63)
		* @return  ( возвращает ):	0- поворот на 0 градусов ( по умолчанию ), 1- поворот на 180 градусов
									вызвать перед формированием изображения ( если данные в массиве уже есть
									то инверсии не будет, будет только то что было сформировано после вызова данной функции )
		******************************************************************************
	*/
	void ST7920_Rotation(uint8_t mode);
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ): Функция вывода буфера кадра на дисплей
		* @param	( параметры ): Вызывать каждый раз чтобы вывести на экран содержание буфера
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_Update(void);
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ): Функция инверсии любого места в буфере
		* @param	( параметры ): начальная точка по х от 0 до 1024, конечная точка по y от 0 до 1024
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_Inversion(uint16_t x_start, uint16_t x_end);
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ): Функция очистки буфера кадра ( само изображение на экране не удаляет )
		* @param	( параметры ):
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_ClearFrameBuffer(void);
	//--------------------------------------------------------------------------------

	/*
		******************************************************************************
		* @brief	 ( описание ):  функция выводит 1 символ
		* @param	( параметры ):	координаты X Y, символ, шрифт, множитель, цвет 1 или 0
		* @return  ( возвращает ):

		******************************************************************************
	*/
	void ST7920_DrawChar(int16_t x, int16_t y, unsigned char ch, FontDef_t* Font, uint8_t multiplier, uint8_t color);
	//----------------------------------------------------------------------------------


	/*
		******************************************************************************
		* @brief	 ( описание ):  функция пишет строку
		* @param	( параметры ):	координаты X Y, символ, шрифт, множитель, цвет 1 или 0
		* @return  ( возвращает ):
		******************************************************************************
	*/
	void ST7920_Print(int16_t x, int16_t y, char* str, FontDef_t* Font, uint8_t multiplier, uint8_t color);
	//----------------------------------------------------------------------------------

	/********************************РАБОТА С ГЕОМЕТРИЧЕСКИМИ ФИГУРАМИ**********************************/

	void ST7920_DrawLine(uint8_t x_start, uint8_t y_start, uint8_t x_end, uint8_t y_end, uint8_t color);

	/*--------------------------------Вывести пустотелый прямоугольник---------------------------------*/
	void ST7920_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t color);
	/*--------------------------------Вывести пустотелый прямоугольник---------------------------------*/

	/*-------------------------------Вывести закрашенный прямоугольник---------------------------------*/
	void ST7920_DrawRectangleFilled(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t color);
	/*-------------------------------Вывести закрашенный прямоугольник---------------------------------*/

	/*---------------------------------Вывести пустотелую окружность-----------------------------------*/
	void ST7920_DrawCircle(uint8_t x, uint8_t y, uint8_t radius, uint8_t color);
	/*---------------------------------Вывести пустотелую окружность-----------------------------------*/

	/*--------------------------------Вывести закрашенную окружность-----------------------------------*/
	void ST7920_DrawCircleFilled(int16_t x, int16_t y, int16_t radius, uint8_t color);
	/*--------------------------------Вывести закрашенную окружность-----------------------------------*/

	/*-----------------------------------Вывести пустотелый треугольник--------------------------------*/
	void ST7920_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t color);
	/*-----------------------------------Вывести пустотелый треугольник--------------------------------*/

	/*----------------------------------Вывести закрашенный треугольник--------------------------------*/
	void ST7920_DrawTriangleFilled(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t color);
	/*----------------------------------Вывести закрашенный треугольник--------------------------------*/

//==============================================================================
// Процедура рисования четверти окружности (закругление, дуга) ( ширина 1 пиксель)
//==============================================================================
void ST7920_DrawCircleHelper(int16_t x0, int16_t y0, int16_t radius, int8_t quadrantMask, uint8_t color);
//==============================================================================


//==============================================================================
// Процедура рисования половины окружности ( правая или левая ) ( заполненый )
//==============================================================================
void ST7920_DrawFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint8_t color);
//==============================================================================


//==============================================================================
// Процедура рисования прямоугольник с закругленніми краями ( заполненый )
//==============================================================================
void ST7920_DrawFillRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, int16_t cornerRadius, uint8_t color);
//==============================================================================


//==============================================================================
// Процедура рисования прямоугольник с закругленніми краями ( пустотелый )
//==============================================================================
void ST7920_DrawRoundRect(int16_t x, int16_t y, uint16_t width, uint16_t height, int16_t cornerRadius, uint8_t color);
//==============================================================================

void ST7920_DrawArc(int16_t x0, int16_t y0, int16_t radius, int16_t startAngle, int16_t endAngle, uint8_t color, uint8_t thick);
void ST7920_DrawLineThick(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t color, uint8_t thick);


/********************************РАБОТА С ГЕОМЕТРИЧЕСКИМИ ФИГУРАМИ**********************************/






#ifdef __cplusplus
}
#endif

#endif	/*	_ST7920_H */

/************************ (C) COPYRIGHT GKP *****END OF FILE****/
